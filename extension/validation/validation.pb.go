// Code generated by protoc-gen-go. DO NOT EDIT.
// source: validation/validation.proto

package validation

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Variant int32

const (
	Variant_ID                    Variant = 0
	Variant_HyphenatedID          Variant = 1
	Variant_Email                 Variant = 2
	Variant_MacAddress            Variant = 3
	Variant_DomainName            Variant = 4
	Variant_UserName              Variant = 5
	Variant_URL                   Variant = 6
	Variant_IPV4                  Variant = 7
	Variant_IPV6                  Variant = 8
	Variant_Password              Variant = 9
	Variant_Latitude              Variant = 10
	Variant_Longitude             Variant = 11
	Variant_CreditCardNumber      Variant = 12
	Variant_CreditCardType        Variant = 13
	Variant_PhoneNumber           Variant = 14
	Variant_TollFreeNumber        Variant = 15
	Variant_E164PhoneNumber       Variant = 16
	Variant_TitleMale             Variant = 17
	Variant_TitleFemale           Variant = 18
	Variant_FirstName             Variant = 19
	Variant_FirstNameMale         Variant = 20
	Variant_FirstNameFemale       Variant = 21
	Variant_LastName              Variant = 22
	Variant_Name                  Variant = 23
	Variant_UnixTime              Variant = 24
	Variant_Date                  Variant = 25
	Variant_Time                  Variant = 26
	Variant_MonthName             Variant = 27
	Variant_Year                  Variant = 28
	Variant_DayOfWeek             Variant = 29
	Variant_DayOfMonth            Variant = 30
	Variant_Timestamp             Variant = 31
	Variant_Century               Variant = 32
	Variant_TimeZone              Variant = 33
	Variant_TimePeriod            Variant = 34
	Variant_Word                  Variant = 35
	Variant_Sentence              Variant = 36
	Variant_Paragraph             Variant = 37
	Variant_Currency              Variant = 38
	Variant_Amount                Variant = 39
	Variant_AmountWithCurrency    Variant = 40
	Variant_Page                  Variant = 41
	Variant_PageSize              Variant = 42
	Variant_PageTotal             Variant = 43
	Variant_Number                Variant = 44
	Variant_ImgURL                Variant = 45
	Variant_ProfileURL            Variant = 46
	Variant_SquareImgURL          Variant = 47
	Variant_SquareProfileURL      Variant = 48
	Variant_BooleanString         Variant = 49
	Variant_NoPlusE164PhoneNumber Variant = 50
	Variant_Words                 Variant = 51
	Variant_Boolean               Variant = 52
	Variant_RFC3339               Variant = 53
)

var Variant_name = map[int32]string{
	0:  "ID",
	1:  "HyphenatedID",
	2:  "Email",
	3:  "MacAddress",
	4:  "DomainName",
	5:  "UserName",
	6:  "URL",
	7:  "IPV4",
	8:  "IPV6",
	9:  "Password",
	10: "Latitude",
	11: "Longitude",
	12: "CreditCardNumber",
	13: "CreditCardType",
	14: "PhoneNumber",
	15: "TollFreeNumber",
	16: "E164PhoneNumber",
	17: "TitleMale",
	18: "TitleFemale",
	19: "FirstName",
	20: "FirstNameMale",
	21: "FirstNameFemale",
	22: "LastName",
	23: "Name",
	24: "UnixTime",
	25: "Date",
	26: "Time",
	27: "MonthName",
	28: "Year",
	29: "DayOfWeek",
	30: "DayOfMonth",
	31: "Timestamp",
	32: "Century",
	33: "TimeZone",
	34: "TimePeriod",
	35: "Word",
	36: "Sentence",
	37: "Paragraph",
	38: "Currency",
	39: "Amount",
	40: "AmountWithCurrency",
	41: "Page",
	42: "PageSize",
	43: "PageTotal",
	44: "Number",
	45: "ImgURL",
	46: "ProfileURL",
	47: "SquareImgURL",
	48: "SquareProfileURL",
	49: "BooleanString",
	50: "NoPlusE164PhoneNumber",
	51: "Words",
	52: "Boolean",
	53: "RFC3339",
}

var Variant_value = map[string]int32{
	"ID":                    0,
	"HyphenatedID":          1,
	"Email":                 2,
	"MacAddress":            3,
	"DomainName":            4,
	"UserName":              5,
	"URL":                   6,
	"IPV4":                  7,
	"IPV6":                  8,
	"Password":              9,
	"Latitude":              10,
	"Longitude":             11,
	"CreditCardNumber":      12,
	"CreditCardType":        13,
	"PhoneNumber":           14,
	"TollFreeNumber":        15,
	"E164PhoneNumber":       16,
	"TitleMale":             17,
	"TitleFemale":           18,
	"FirstName":             19,
	"FirstNameMale":         20,
	"FirstNameFemale":       21,
	"LastName":              22,
	"Name":                  23,
	"UnixTime":              24,
	"Date":                  25,
	"Time":                  26,
	"MonthName":             27,
	"Year":                  28,
	"DayOfWeek":             29,
	"DayOfMonth":            30,
	"Timestamp":             31,
	"Century":               32,
	"TimeZone":              33,
	"TimePeriod":            34,
	"Word":                  35,
	"Sentence":              36,
	"Paragraph":             37,
	"Currency":              38,
	"Amount":                39,
	"AmountWithCurrency":    40,
	"Page":                  41,
	"PageSize":              42,
	"PageTotal":             43,
	"Number":                44,
	"ImgURL":                45,
	"ProfileURL":            46,
	"SquareImgURL":          47,
	"SquareProfileURL":      48,
	"BooleanString":         49,
	"NoPlusE164PhoneNumber": 50,
	"Words":                 51,
	"Boolean":               52,
	"RFC3339":               53,
}

func (x Variant) String() string {
	return proto.EnumName(Variant_name, int32(x))
}

func (Variant) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ad204be8ffbb4850, []int{0}
}

type Rule struct {
	// string
	MinLength int32  `protobuf:"varint,1,opt,name=min_length,json=minLength,proto3" json:"min_length,omitempty"`
	MaxLength int32  `protobuf:"varint,2,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`
	Prefix    string `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Suffix    string `protobuf:"bytes,4,opt,name=suffix,proto3" json:"suffix,omitempty"`
	// uint32
	MinInt uint32 `protobuf:"varint,11,opt,name=min_int,json=minInt,proto3" json:"min_int,omitempty"`
	MaxInt uint32 `protobuf:"varint,12,opt,name=max_int,json=maxInt,proto3" json:"max_int,omitempty"`
	// float
	MinFloat             float32  `protobuf:"fixed32,21,opt,name=min_float,json=minFloat,proto3" json:"min_float,omitempty"`
	MaxFloat             float32  `protobuf:"fixed32,22,opt,name=max_float,json=maxFloat,proto3" json:"max_float,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rule) Reset()         { *m = Rule{} }
func (m *Rule) String() string { return proto.CompactTextString(m) }
func (*Rule) ProtoMessage()    {}
func (*Rule) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad204be8ffbb4850, []int{0}
}

func (m *Rule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rule.Unmarshal(m, b)
}
func (m *Rule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rule.Marshal(b, m, deterministic)
}
func (m *Rule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rule.Merge(m, src)
}
func (m *Rule) XXX_Size() int {
	return xxx_messageInfo_Rule.Size(m)
}
func (m *Rule) XXX_DiscardUnknown() {
	xxx_messageInfo_Rule.DiscardUnknown(m)
}

var xxx_messageInfo_Rule proto.InternalMessageInfo

func (m *Rule) GetMinLength() int32 {
	if m != nil {
		return m.MinLength
	}
	return 0
}

func (m *Rule) GetMaxLength() int32 {
	if m != nil {
		return m.MaxLength
	}
	return 0
}

func (m *Rule) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *Rule) GetSuffix() string {
	if m != nil {
		return m.Suffix
	}
	return ""
}

func (m *Rule) GetMinInt() uint32 {
	if m != nil {
		return m.MinInt
	}
	return 0
}

func (m *Rule) GetMaxInt() uint32 {
	if m != nil {
		return m.MaxInt
	}
	return 0
}

func (m *Rule) GetMinFloat() float32 {
	if m != nil {
		return m.MinFloat
	}
	return 0
}

func (m *Rule) GetMaxFloat() float32 {
	if m != nil {
		return m.MaxFloat
	}
	return 0
}

var E_Required = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         820001,
	Name:          "validation.required",
	Tag:           "varint,820001,opt,name=required",
	Filename:      "validation/validation.proto",
}

var E_Editable = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         820002,
	Name:          "validation.editable",
	Tag:           "varint,820002,opt,name=editable",
	Filename:      "validation/validation.proto",
}

var E_Hidden = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         820003,
	Name:          "validation.hidden",
	Tag:           "varint,820003,opt,name=hidden",
	Filename:      "validation/validation.proto",
}

var E_Nullable = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         820004,
	Name:          "validation.nullable",
	Tag:           "varint,820004,opt,name=nullable",
	Filename:      "validation/validation.proto",
}

var E_Datatype = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         820005,
	Name:          "validation.datatype",
	Tag:           "bytes,820005,opt,name=datatype",
	Filename:      "validation/validation.proto",
}

var E_Variant = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*Variant)(nil),
	Field:         820006,
	Name:          "validation.variant",
	Tag:           "varint,820006,opt,name=variant,enum=validation.Variant",
	Filename:      "validation/validation.proto",
}

var E_Rule = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*Rule)(nil),
	Field:         820007,
	Name:          "validation.rule",
	Tag:           "bytes,820007,opt,name=rule",
	Filename:      "validation/validation.proto",
}

func init() {
	proto.RegisterEnum("validation.Variant", Variant_name, Variant_value)
	proto.RegisterType((*Rule)(nil), "validation.Rule")
	proto.RegisterExtension(E_Required)
	proto.RegisterExtension(E_Editable)
	proto.RegisterExtension(E_Hidden)
	proto.RegisterExtension(E_Nullable)
	proto.RegisterExtension(E_Datatype)
	proto.RegisterExtension(E_Variant)
	proto.RegisterExtension(E_Rule)
}

func init() { proto.RegisterFile("validation/validation.proto", fileDescriptor_ad204be8ffbb4850) }

var fileDescriptor_ad204be8ffbb4850 = []byte{
	// 887 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xdb, 0x72, 0x1a, 0x47,
	0x13, 0xfe, 0x91, 0x10, 0x87, 0x41, 0x87, 0xf6, 0xc8, 0x92, 0xb1, 0xf5, 0x2b, 0x21, 0xce, 0x89,
	0x38, 0x11, 0xc4, 0x42, 0x71, 0x2a, 0xf2, 0x95, 0x0c, 0xa2, 0x42, 0x95, 0x24, 0x53, 0x2b, 0x6c,
	0x55, 0x7c, 0xe3, 0x1a, 0xd8, 0x66, 0x99, 0xca, 0xee, 0x0c, 0x9e, 0x9d, 0x75, 0x20, 0x0f, 0x90,
	0xf7, 0xc8, 0xf9, 0x2e, 0xcf, 0x94, 0x47, 0x49, 0xf5, 0xec, 0x82, 0x94, 0x5c, 0x44, 0xb9, 0xeb,
	0xef, 0xd4, 0xcd, 0xec, 0x4c, 0x35, 0x6c, 0xef, 0xad, 0x08, 0xa5, 0x2f, 0xac, 0xd4, 0xaa, 0x79,
	0x5d, 0x36, 0xa6, 0x46, 0x5b, 0xcd, 0xd9, 0x35, 0xf3, 0xa0, 0x16, 0x68, 0x1d, 0x84, 0xd8, 0x74,
	0xca, 0x30, 0x19, 0x37, 0x7d, 0x8c, 0x47, 0x46, 0x4e, 0xad, 0x36, 0xa9, 0xfb, 0xe1, 0x9f, 0x39,
	0x96, 0xf7, 0x92, 0x10, 0xf9, 0x3e, 0x63, 0x91, 0x54, 0xaf, 0x43, 0x54, 0x81, 0x9d, 0x54, 0x73,
	0xb5, 0x5c, 0x7d, 0xcd, 0x2b, 0x47, 0x52, 0x9d, 0x39, 0xc2, 0xc9, 0x62, 0xb6, 0x90, 0x57, 0x32,
	0x59, 0xcc, 0x32, 0x79, 0x97, 0x15, 0xa6, 0x06, 0xc7, 0x72, 0x56, 0x5d, 0xad, 0xe5, 0xea, 0x65,
	0x2f, 0x43, 0xc4, 0xc7, 0xc9, 0x98, 0xf8, 0x7c, 0xca, 0xa7, 0x88, 0xdf, 0x63, 0x45, 0x9a, 0x26,
	0x95, 0xad, 0x56, 0x6a, 0xb9, 0xfa, 0x86, 0x57, 0x88, 0xa4, 0xea, 0x29, 0xeb, 0x04, 0x31, 0x73,
	0xc2, 0x7a, 0x26, 0x88, 0x19, 0x09, 0x7b, 0x8c, 0x7e, 0xcd, 0xeb, 0x71, 0xa8, 0x85, 0xad, 0xee,
	0xd4, 0x72, 0xf5, 0x15, 0xaf, 0x14, 0x49, 0xd5, 0x25, 0xec, 0x44, 0x31, 0xcb, 0xc4, 0xdd, 0x4c,
	0x14, 0x33, 0x27, 0x3e, 0xfa, 0xa3, 0xc0, 0x8a, 0x2f, 0x85, 0x91, 0x42, 0x59, 0x5e, 0x60, 0x2b,
	0xbd, 0x0e, 0xfc, 0x8f, 0x03, 0x5b, 0xff, 0x7a, 0x3e, 0x9d, 0xa0, 0x12, 0x16, 0xfd, 0x5e, 0x07,
	0x72, 0xbc, 0xcc, 0xd6, 0x4e, 0x23, 0x21, 0x43, 0x58, 0xe1, 0x9b, 0x8c, 0x9d, 0x8b, 0xd1, 0x89,
	0xef, 0x1b, 0x8c, 0x63, 0x58, 0x25, 0xdc, 0xd1, 0x91, 0x90, 0xea, 0x42, 0x44, 0x08, 0x79, 0xbe,
	0xce, 0x4a, 0x2f, 0x62, 0x34, 0x0e, 0xad, 0xf1, 0x22, 0x5b, 0x7d, 0xe1, 0x9d, 0x41, 0x81, 0x97,
	0x58, 0xbe, 0xd7, 0x7f, 0x79, 0x04, 0xc5, 0xac, 0x7a, 0x02, 0x25, 0xb2, 0xf6, 0x45, 0x1c, 0x7f,
	0xa7, 0x8d, 0x0f, 0x65, 0x42, 0x67, 0xc2, 0x4a, 0x9b, 0xf8, 0x08, 0x8c, 0x6f, 0xb0, 0xf2, 0x99,
	0x56, 0x41, 0x0a, 0x2b, 0xfc, 0x2e, 0x83, 0xb6, 0x41, 0x5f, 0xda, 0xb6, 0x30, 0xfe, 0x45, 0x12,
	0x0d, 0xd1, 0xc0, 0x3a, 0xe7, 0x6c, 0xf3, 0x9a, 0x1d, 0xcc, 0xa7, 0x08, 0x1b, 0x7c, 0x8b, 0x55,
	0xfa, 0x13, 0xad, 0x30, 0x33, 0x6d, 0x92, 0x69, 0xa0, 0xc3, 0xb0, 0x6b, 0x70, 0xc1, 0x6d, 0xf1,
	0x6d, 0xb6, 0x75, 0xfa, 0xf8, 0xc9, 0xd1, 0x4d, 0x23, 0xd0, 0xc8, 0x81, 0xb4, 0x21, 0x9e, 0x8b,
	0x10, 0xe1, 0x0e, 0x35, 0x72, 0xb0, 0x8b, 0x11, 0x11, 0x9c, 0xf4, 0xae, 0x34, 0xb1, 0x75, 0x47,
	0xdb, 0xe6, 0x77, 0xd8, 0xc6, 0x12, 0xba, 0xc8, 0x5d, 0x6a, 0xbb, 0xa4, 0xb2, 0xd8, 0x4e, 0x7a,
	0xae, 0x2c, 0xb5, 0x4b, 0xa7, 0x77, 0xd5, 0x3d, 0xf7, 0xa1, 0x94, 0x9c, 0x0d, 0x64, 0x84, 0x50,
	0x25, 0xbe, 0x23, 0x2c, 0xc2, 0x7d, 0xaa, 0x1c, 0xf7, 0x80, 0x06, 0x9e, 0x6b, 0x65, 0x27, 0x2e,
	0xb0, 0x47, 0xc2, 0x37, 0x28, 0x0c, 0xfc, 0x9f, 0x84, 0x8e, 0x98, 0x3f, 0x1f, 0x5f, 0x21, 0x7e,
	0x0b, 0xfb, 0xee, 0x0a, 0x08, 0x3a, 0x33, 0xbc, 0x93, 0x1e, 0x24, 0xc2, 0xd8, 0x8a, 0x68, 0x0a,
	0xef, 0xf2, 0x0a, 0x2b, 0xb6, 0x51, 0xd9, 0xc4, 0xcc, 0xa1, 0x46, 0x53, 0x49, 0x7b, 0xa5, 0x15,
	0xc2, 0x7b, 0x94, 0x24, 0xd4, 0x47, 0x23, 0xb5, 0x0f, 0x0f, 0x69, 0xc4, 0x15, 0xdd, 0xc6, 0xfb,
	0xe4, 0xbb, 0x44, 0x65, 0x51, 0x8d, 0x10, 0x3e, 0xa0, 0x8e, 0x7d, 0x61, 0x44, 0x60, 0xc4, 0x74,
	0x02, 0x1f, 0x92, 0xd8, 0x4e, 0x8c, 0x41, 0x35, 0x9a, 0xc3, 0x47, 0x9c, 0xb1, 0xc2, 0x49, 0xa4,
	0x13, 0x65, 0xe1, 0x63, 0xbe, 0xcb, 0x78, 0x5a, 0x5f, 0x49, 0x3b, 0x59, 0x7a, 0xea, 0xd4, 0xb8,
	0x2f, 0x02, 0x84, 0x4f, 0xd2, 0x4b, 0x0f, 0xf0, 0x52, 0x7e, 0x8f, 0xf0, 0x28, 0x6d, 0x1c, 0xe0,
	0x40, 0x5b, 0x11, 0xc2, 0xa7, 0xd4, 0x2a, 0xbb, 0x8e, 0xcf, 0xa8, 0xee, 0x45, 0x01, 0xbd, 0x9e,
	0x03, 0xfa, 0x9d, 0x7d, 0xa3, 0xc7, 0x32, 0x44, 0xc2, 0x0d, 0x7a, 0xa1, 0x97, 0x6f, 0x12, 0x61,
	0x30, 0x73, 0x34, 0xe9, 0x81, 0xa4, 0xcc, 0x0d, 0xdf, 0xe7, 0x74, 0x47, 0xcf, 0xb4, 0x0e, 0x51,
	0xa8, 0x4b, 0x6b, 0xa4, 0x0a, 0xe0, 0x31, 0xbf, 0xcf, 0x76, 0x2e, 0x74, 0x3f, 0x4c, 0xe2, 0x7f,
	0x3e, 0x80, 0x43, 0x7a, 0xe5, 0x74, 0xfa, 0x18, 0x5a, 0xf4, 0xcd, 0xb2, 0x20, 0x1c, 0x11, 0xf0,
	0xba, 0xed, 0x56, 0xab, 0xf5, 0x15, 0x7c, 0x71, 0xfc, 0x94, 0x95, 0x0c, 0xbe, 0x49, 0xa4, 0x41,
	0x9f, 0xef, 0x37, 0xd2, 0x15, 0xd2, 0x58, 0xac, 0x90, 0x46, 0x57, 0x62, 0xe8, 0x3f, 0x9f, 0xd2,
	0x7e, 0x89, 0xab, 0x3f, 0xfe, 0x70, 0x58, 0xcb, 0xd5, 0x4b, 0xde, 0x32, 0x40, 0x61, 0x7a, 0xae,
	0x62, 0x48, 0x3b, 0xe5, 0xdf, 0xc3, 0x3f, 0x2d, 0xc2, 0x8b, 0xc0, 0xf1, 0x97, 0xac, 0x30, 0x91,
	0xbe, 0x8f, 0xea, 0xb6, 0xe8, 0xcf, 0x59, 0x34, 0xb3, 0xd3, 0x54, 0x95, 0x84, 0xe1, 0x7f, 0x99,
	0xfa, 0xcb, 0x62, 0xea, 0x22, 0x40, 0x61, 0x5f, 0x58, 0x61, 0xe7, 0xd3, 0x5b, 0xc3, 0xbf, 0xba,
	0x70, 0xd9, 0x5b, 0x06, 0x8e, 0x2f, 0x58, 0xf1, 0x6d, 0xb6, 0x5c, 0x6e, 0xc9, 0xfe, 0xe6, 0xb2,
	0x9b, 0x87, 0xdb, 0x8d, 0x1b, 0x3b, 0x3b, 0x5b, 0x4c, 0xde, 0xa2, 0xc9, 0xf1, 0x29, 0xcb, 0x9b,
	0xe4, 0xf6, 0x53, 0xfc, 0xee, 0x9a, 0x55, 0x0e, 0xe1, 0x66, 0x33, 0x5a, 0xe4, 0x9e, 0x8b, 0x3f,
	0x6b, 0xbf, 0x3a, 0x09, 0xa4, 0x9d, 0x24, 0xc3, 0xc6, 0x48, 0x47, 0x4d, 0x93, 0x08, 0x15, 0x1c,
	0x04, 0x89, 0x49, 0x9a, 0x26, 0x38, 0x08, 0x50, 0xb9, 0xa6, 0x4d, 0x9c, 0x59, 0x54, 0xf1, 0xdf,
	0xff, 0x45, 0x9e, 0x5e, 0x97, 0xc3, 0x82, 0xb3, 0xb5, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x78,
	0x13, 0xe2, 0x00, 0x70, 0x06, 0x00, 0x00,
}
